const prettier = require(`prettier`)
const Joi = require(`@hapi/joi`)
const Handlebars = require(`handlebars`)
const fs = require(`fs-extra`)
const _ = require(`lodash`)
const toc = require(`markdown-toc`)

const {
  pluginOptionsSchema,
} = require(`./plugin/dist/steps/declare-plugin-options-schema`)

/**
 * Takes the keys from a Joi schema and recursively
 * turns the nested keys into structured markdown documentation
 *
 * @param {object} keys
 * @param {string} mdString
 * @param {number} level
 * @param {string} parent
 */
function joiKeysToMD({ keys, mdString = ``, level = 1, parent = null }) {
  Object.entries(keys).forEach(([key, value]) => {
    const title = `${parent ? `${parent}.` : ``}${key}`

    mdString += `${`#`.repeat(level + 1)} ${title}`

    if (value.flags && value.flags.presence === `required`) {
      mdString += `\n\n`
      mdString += `**This option is required.**`
    }

    if (value.type) {
      mdString += `\n\n`
      mdString += `type: ${_.startCase(value.type)}`
    }

    if (value.flags && value.flags.default) {
      const defaultValue = value.flags.default

      let printedValue

      if (typeof defaultValue === `string`) {
        printedValue = defaultValue
      } else if (Array.isArray(defaultValue)) {
        printedValue = `[${defaultValue.join(`, `)}]`
      } else {
        printedValue = defaultValue.toString()
      }

      mdString += `\n`
      mdString += `Default value: \`${printedValue}\``
    }

    if (value.flags && value.flags.description) {
      mdString += `\n\n`
      const description = value.flags.description.trim()
      mdString += description.endsWith(`.`) ? description : `${description}.`
    }

    if (value.examples && value.examples.length) {
      value.examples.forEach((example) => {
        mdString += `\n\n\`\`\`js\n` + example + `\n\`\`\`\n`
      })
    }

    mdString += `\n\n`

    if (value.keys) {
      mdString = joiKeysToMD({
        keys: value.keys,
        mdString,
        level: level + 1,
        parent: title,
      })
    }
  })

  return mdString
}

/**
 * Converts the Joi schema description into markdown
 * and writes it to the filesystem
 *
 * @param {object} description
 */
async function generateMdFileFromSchemaDescription(description) {
  const template = Handlebars.compile(`# Plugin Options

[comment]: # (This file is automatically generated. Do not edit it directly. Instead, edit the Joi schema in ./plugin/src/steps/declare-plugin-options-schema.js)
{{{tableOfContents}}}
{{{docs}}}`)

  const docs = joiKeysToMD({
    keys: description.keys,
  })
  const tableOfContents = toc(docs).content

  const mdContents = template({
    tableOfContents,
    docs,
  })

  const mdContentsFormatted = prettier.format(mdContents, {
    parser: `markdown`,
  })

  await fs.writeFile(`./generated-plugin-options-docs.md`, mdContentsFormatted)
}

const description = pluginOptionsSchema({ Joi }).describe()

generateMdFileFromSchemaDescription(description)
